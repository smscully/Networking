AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a VPC with subnets across two Availability Zones for public web servers, private app servers, 
  and private database servers. For connectivity, creates an internet gateway, NAT gateways for each AZ, and route
  tables for the public and private subnets. Following security best practicies, implements security groups for the web,
  app, and database servers, NACLs for the subnets, and a gateway endpoint for S3 connectivity.

Metadata:
  License: GNU General Public License v3.0
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Environment and Network Configuration
        Parameters:
          - EnvironmentName
          - VPCCIDR
          - PublicSubnetWeb1CIDR
          - PublicSubnetWeb2CIDR
          - PrivateSubnetApp1CIDR
          - PrivateSubnetApp2CIDR
          - PrivateSubnetDB1CIDR
          - PrivateSubnetDB2CIDR
    ParameterLabels:
      EnvironmentName:
        default: Envronment Name
      PrivateSubnetApp1CIDR:
        default: Private Subnet App 1 CIDR
      PrivateSubnetApp2CIDR:
        default: Private Subnet App 2 CIDR
      PrivateSubnetDB1CIDR:
        default: Private Subnet DB 1 CIDR
      PrivateSubnetDB2CIDR:
        default: Private Subnet DB 2 CIDR
      PublicSubnetWeb1CIDR:
        default: Public Subnet Web 1 CIDR
      PublicSubnetWeb2CIDR:
        default: Public Subnet Web 2 CIDR
      VPCCIDR:
        default: VPC CIDR

Parameters:
  EnvironmentName:
    Description: Please enter an environment name to identify each stack resource
    Type: String
    Default: Multi-AZ VPC
  PrivateSubnetApp1CIDR:
    Description: Please enter the CIDR block for the private application server subnet in the first Availability Zone
    Type: String
    Default: 10.0.20.0/24
  PrivateSubnetApp2CIDR:
    Description: Please enter the CIDR block for the private application server subnet in the second Availability Zone
    Type: String
    Default: 10.0.21.0/24
  PrivateSubnetDB1CIDR:
    Description: Please enter the CIDR block for the private database server subnet in the first Availability Zone
    Type: String
    Default: 10.0.30.0/24
  PrivateSubnetDB2CIDR:
    Description: Please enter the CIDR block for the private database server subnet in the second Availability Zone
    Type: String
    Default: 10.0.31.0/24
  PublicSubnetWeb1CIDR:
    Description: Please enter the CIDR block for the public web server subnet in the first Availability Zone
    Type: String
    Default: 10.0.10.0/24
  PublicSubnetWeb2CIDR:
    Description: Please enter the CIDR block for the public web server subnet in the second Availability Zone
    Type: String
    Default: 10.0.11.0/24
  VPCCIDR:
    Description: Please enter the CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetWeb1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetWeb1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet Web 1 (AZ1)

  PublicSubnetWeb2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnetWeb2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet Web 2 (AZ2)

  PrivateSubnetApp1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetApp1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet App 1 (AZ1)

  PrivateSubnetApp2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetApp2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet App 2 (AZ2)

  PrivateSubnetDB1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetDB1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet DB 1 (AZ1)

  PrivateSubnetDB2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetDB2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet DB 2 (AZ2)

  NATGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NATGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnetWeb1

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnetWeb2

  PublicSubnetWeb1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet Web 1 Route Table

  PublicSubnetWeb1Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicSubnetWeb1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetWeb1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetWeb1RouteTable
      SubnetId: !Ref PublicSubnetWeb1

  PublicSubnetWeb2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet Web 2 Route Table

  PublicSubnetWeb2Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicSubnetWeb2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetWeb2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetWeb2RouteTable
      SubnetId: !Ref PublicSubnetWeb2

  PrivateSubnetApp1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet App 1 Route Table

  PrivateSubnetApp1Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateSubnetApp1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateSubnetApp1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetApp1RouteTable
      SubnetId: !Ref PrivateSubnetApp1

  PrivateSubnetApp2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet App 2 Route Table

  PrivateSubnetApp2Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateSubnetApp2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  PrivateSubnetApp2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetApp2RouteTable
      SubnetId: !Ref PrivateSubnetApp2

  PrivateSubnetDB1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet DB 1 Route Table

  PrivateSubnetDB1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetDB1RouteTable
      SubnetId: !Ref PrivateSubnetDB1

  PrivateSubnetDB2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet DB 2 Route Table

  PrivateSubnetDB2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetDB2RouteTable
      SubnetId: !Ref PrivateSubnetDB2

  SecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for web servers"
      GroupName: "SecurityGroupWeb"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  SecurityGroupApp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for app servers"
      GroupName: "SecurityGroupApp"
      VpcId: !Ref VPC
  
  SecurityGroupAppInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      #SourceSecurityGroupID: !Ref SecurityGroupWeb
      GroupID: !Ref SecurityGroupApp
  
  SecurityGroupDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for DB servers"
      GroupName: "SecurityGroupDB"
      VpcId: !Ref VPC
  
  #Placeholder for SecurityGroupDB rules

  NetworkACLWeb:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC

Outputs:
  VPC:
    Description: Reference to the created VPC
    Value: !Ref VPC

  PublicSubnetWeb1:
    Description: Reference to the public subnet for web servers in AZ1.
    Value: !Ref PublicSubnetWeb1

  PublicSubnetWeb2:
    Description: Reference to the public subnet for web servers in AZ2.
    Value: !Ref PublicSubnetWeb2

  PrivateSubnetApp1:
    Description: Reference to the private subnet for app servers in AZ1.
    Value: !Ref PrivateSubnetApp1

  PrivateSubnetApp2:
    Description: Reference to the private subnet for app servers in AZ2.
    Value: !Ref PrivateSubnetApp2

  PrivateSubnetDB1:
    Description: Reference to the private subnet for database servers in AZ1.
    Value: !Ref PrivateSubnetDB1

  PrivateSubnetDB2:
    Description: Reference to the private subnet for database servers in AZ2.
    Value: !Ref PrivateSubnetDB2

  SecurityGroupWeb:
    Description: Reference to the security group for web server instances.
    Value: !Ref SecurityGroupWeb

  SecurityGroupApp:
    Description: Reference to the security group for app server instances.
    Value: !Ref SecurityGroupApp

  SecurityGroupDB:
    Description: Reference to the security group for RDS DB server instances.
    Value: !Ref SecurityGroupDB
